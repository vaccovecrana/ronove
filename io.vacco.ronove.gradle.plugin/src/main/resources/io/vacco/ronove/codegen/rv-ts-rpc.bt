/* ================================================================ */
/* ======== Generated RPC methods - do not modify directly ======== */
/* ================================================================ */
import {
  {{tsSchemaTypes}}
} from "./schema"

const baseHeaders = {"Content-Type": "application/json"}

const doRequest = <I, O>(url: string, req: I, init: RequestInit): Promise<O> => {
  const payload = JSON.stringify(req)
  const options = {...init, headers: baseHeaders}
  if (init.method && init.method === "Get") {
    options.headers = {...options.headers, rvGetBody: payload}
  } else {
    options.body = payload
  }
  return fetch(url, options)
    .then(response => response.json())
    .then(jData => Promise.resolve(jData as O))
}

export const doJsonIo = <I, O>(url: string, req: I, method: string): Promise<O> =>
  doRequest(url, req, {method})

/* ====================================== */
/* ======== Start of RPC methods ======== */
/* ====================================== */
{{for rvd in rvDescriptors}}
export const {{rvd.opMethod.getName()}} = (in: {{rvd.tsInputType}}): Promise<{{rvd.tsOutputType}}> =>
  doJsonIo("{{rvd.opMetadata.path()}}", in, "{{rvd.opMetadata.method().toString()}}")
{{end}}
