/* ========================================================= */
/* ======== Generated file - do not modify directly ======== */
/* ========================================================= */

const doJsonIo = <I, O>(url: string, method: string, body: I,
                        headers: Map<string, string>, mediaType?: string): Promise<O> => {
  const options: any = {method, headers: {}}
  if (mediaType) {
    options.headers["Content-Type"] = mediaType
  }
  if (body) {
    options.body = body
  }
  headers.forEach((v, k) => options.headers[k] = v)
  return fetch(url, options)
    .then(response => Promise
      .resolve(response.json() as O)
      .catch(cause => Promise.reject({ response, cause }))
    )
}

/* ====================================== */
/* ============= RPC types ============== */
/* ====================================== */
{{for tsType in tsSchemaTypes}}
export {{tsType.type}} {{tsType.name}} {
  {{for prop in tsType.properties}}{{prop.name}}: {{prop.type}}{{";\n  "}}{{end}}
  {{for enumVal in tsType.enumValues}}{{enumVal}} = "{{enumVal}}",{{"\n  "}}{{end}}
}
{{end}}

/* ====================================== */
/* ============ RPC methods ============= */
/* ====================================== */

/*
Source controllers:

{{for ctl in rvControllers}}- {{ctl}}{{"\n"}}{{end}}
 */
{{for rvd in rvDescriptors}}
export const {{rvd.javaMethod.getName()}} = ({{paramFn.apply(rvd)}}): Promise<{{retFn.apply(rvd.responseType)}}> => {
  let path = "{{rvd.path.value()}}"
  {{for pp in rvd.pathParams}}
  path = path.replace("\{ {{pp.name}} \}".replace(/\s+/g, ""), {{pp.name}}.toString()){{"\n  "}}
  {{end}}
  {{if !rvd.queryParams.isEmpty()}}
  const qParams = new URLSearchParams()
  {{for qp in rvd.queryParams}}
  if ({{qp.name}}) {
    qParams.append("{{qp.name}}", {{qp.name}}.toString())
  }
  {{end}}
  path = `${path}?${qParams.toString()}`
  {{end}}
  {{if !rvd.headerParams.isEmpty()}}
  const headers = new Map<string, string>()
  {{for hp in rvd.headerParams}}
  headers.set("{{hp.name}}", {{hp.name}}){{"\n  "}}
  {{end}}
  {{end}}
  {{if !rvd.formParams.isEmpty()}}
  const formData = new FormData();
  {{for fp in rvd.formParams}}
  formData.append("{{fp.name}}", {{fp.name}});
  {{end}}
  {{end}}
  return doJsonIo(path, "{{rvd.httpMethodTxt}}",
    {{if rvd.beanParam != null}}
      JSON.stringify({{rvd.beanParam.name}})
    {{elseif !rvd.formParams.isEmpty()}}
      new URLSearchParams(formData as any)
    {{else}}
      undefined
    {{end}},
    {{if !rvd.headerParams.isEmpty()}}headers{{else}}new Map(){{end}},
    {{if rvd.consumes != null}}"{{rvd.consumes.value()[0]}}"{{else}}undefined{{end}}
  )
}
{{end}}
