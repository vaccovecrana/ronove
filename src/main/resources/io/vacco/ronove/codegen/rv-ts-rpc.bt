/* ========================================================= */
/* ======== Generated file - do not modify directly ======== */
/* ========================================================= */

import {
  {{tsSchemaTypes}}
} from "./schema"

const doJsonIo = <I, O>(url: string, method: string, body: I,
                        headers: Map<string, string>): Promise<O> => {
  const options: any = {method, headers: {}}
  if (body) {
    options.headers["Content-Type"] = "application/json"
    options.body = JSON.stringify(body)
  }
  headers.forEach((v, k) => options.headers[k] = v)
  return fetch(url, options)
    .then(response => response.json())
    .then(jData => Promise.resolve(jData as O))
}

/* ====================================== */
/* ======== Start of RPC methods ======== */
/* ====================================== */

/*
Source controllers:

{{for ctl in rvControllers}}- {{ctl}}{{"\n"}}{{end}}
 */
{{for rvd in rvDescriptors}}
export const {{rvd.handler.getName()}} = ({{rvd.paramsTsList}}): Promise<{{rvd.responseTsType}}> => {
  let path = "{{rvd.path.value()}}"
  {{for pp in rvd.pathParams}}path = path.replace("\{ {{pp.name}} \}".replace(/\s+/g, ""), {{pp.name}}.toString()){{"\n  "}}{{end}}
  {{if !rvd.queryParams.isEmpty()}}
  const qParams = new URLSearchParams()
  {{for qp in rvd.queryParams}}qParams.append("{{qp.name}}", {{qp.name}}.toString()){{"\n  "}}{{end}}
  path = `${path}?${qParams.toString()}`
  {{end}}
  {{if !rvd.headerParams.isEmpty()}}
  const headers = new Map<string, string>()
  {{for hp in rvd.headerParams}}headers.set("{{hp.name}}", {{if hp.tsType.equals("string")}}{{hp.name}}{{else}}JSON.stringify({{hp.name}}){{end}}){{"\n  "}}{{end}}
  {{end}}
  return doJsonIo(path, "{{rvd.httpMethodTxt}}", {{if rvd.beanParam != null}}body{{else}}undefined{{end}}, {{if !rvd.headerParams.isEmpty()}}headers{{else}}new Map(){{end}})
}
{{end}}
