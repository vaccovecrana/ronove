/* ========================================================= */
/* ======== Generated file - do not modify directly ======== */
/* ========================================================= */

import {
  {{tsSchemaTypes}}
} from "./schema"

const baseHeaders = {"Content-Type": "application/json"}

const doRequest = <I, O>(url: string, req: I, method: string, // TODO <-- change req to BeanParam
                         pathParams: Map<string, string>,
                         queryParams: Map<string, string>,
                         headerParams: Map<string, string>): Promise<O> => {
  const payload = JSON.stringify(req)
  const options: any = {...init, method, headers: baseHeaders}
  if (init.method && init.method === "Get") {
    options.headers["Rv-Get-Body"] = payload
  } else {
    options.body = payload
  }
  return fetch(url, options)
    .then(response => response.json())
    .then(jData => Promise.resolve(jData as O))
}

export const doJsonIo = <I, O>(url: string, req: I, method: string): Promise<O> =>
  doRequest(url, req, {method})

/* ====================================== */
/* ======== Start of RPC methods ======== */
/* ====================================== */

/*
Source controllers:
{{for ctl in rvControllers}}
- {{ctl}}
{{end}}
 */
{{for rvd in rvDescriptors}}
export const {{rvd.httpMethodTxt}} = ({{if rvd.tsInputType != null}}req: {{rvd.tsInputType}}{{end}}): Promise<{{rvd.responseTsType}}> =>
  doJsonIo("{{rvd.path.value()}}", {{if rvd.tsInputType != null}}req{{else}}{}{{end}}, "{{rvd.httpMethod}}")
{{end}}
